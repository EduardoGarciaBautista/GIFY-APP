{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","helpers/getGifs.js","Components/GifGrid.js","hooks/useFetchGifs.js","App.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","console","log","length","cats","type","placeholder","value","onChange","e","target","GifGridItem","title","url","id","className","src","alt","getGifs","category","a","encodeURI","fetch","result","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","key","GifExpertApp","defaultCategories","categories","xmlns","viewBox","fill","fill-opacity","d","item","ReactDOM","render","document","getElementById"],"mappings":"6MA4CeA,EAzCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAuBvC,OAEI,0BAAMC,SAdW,SAACC,GAClBA,EAAMC,iBAENC,QAAQC,IAAI,aACRN,EAAWO,OAAS,IACpBT,GAAc,SAAAU,GAAI,OAAKR,GAAL,mBAAoBQ,OAEtCH,QAAQC,IAAI,0BACZL,EAAc,OAOd,2BACIQ,KAAK,OACLC,YAAY,SACZC,MAAOX,EACPY,SAzBW,SAACC,GACpBZ,EAAcY,EAAEC,OAAOH,OAEvBN,QAAQC,IAAI,qBCRPS,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAWC,GAAU,EAAdC,GAAc,EAAVD,KAErC,OACI,yBAAKE,UAAU,uBAAuBD,GAAG,QACrC,yBAAKC,UAAU,iBACX,yBAAKC,IAAKH,EAAKI,IAAKL,KAExB,yBAAKG,UAAU,iBACX,2BACKH,M,uBCZPM,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DAER,mCAENP,EAJc,iDAIkCQ,UAAUF,GAJ5C,6BAER,oCAFQ,SAMCG,MAAMT,GANP,cAMdU,EANc,gBAQGA,EAAOC,OARV,uBAQZC,EARY,EAQZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHd,GAAIc,EAAId,GACRF,MAAOgB,EAAIhB,MACXC,IAAG,UAAEe,EAAIC,cAAN,aAAE,EAAYC,iBAAiBjB,QAdtB,kBAiBba,GAjBa,4CAAH,sDC2BNK,EArBE,SAAC,GAAkB,IAAD,ECFP,SAACZ,GAAc,IAAD,EACZxB,mBAAS,CAC/B8B,KAAM,GACNO,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAatC,OAPAC,qBAAU,WACNjB,EAAQC,GAAUiB,MAAK,SAAAb,GAAM,OAAIW,EAAS,CACtCT,KAAMF,EACNS,SAAS,SAEd,CAACb,IAEGc,EDTyBI,CAFD,EAAflB,UAETa,EAFwB,EAExBA,QAAeH,EAFS,EAEfJ,KAEhB,OAEI,yBAAKV,UAAU,aAEbiB,EACD,2CACA,oCACKH,EAAOF,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAaU,IAAKV,EAAId,IAAQc,UEZjDW,EAAe,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IAGpB7C,mBAAS6C,GAHW,mBAGjDC,EAHiD,KAGrC/C,EAHqC,KAKxD,OACI,yBAAKqB,UAAU,uBACX,yBAAKA,UAAU,UACf,yBAAK2B,MAAM,6BAA6BC,QAAQ,gBAAe,0BAAMC,KAAK,UAAUC,eAAa,IAAIC,EAAE,oIACnG,4CACA,kBAAC,EAAD,CAAapD,cAAeA,KAGhC,yBAAKqB,UAAU,UAEf,yBAAKA,UAAU,aACf,4BACK0B,GAAcA,EAAWd,KAAI,SAAAoB,GAC1B,OACI,kBAAC,EAAD,CACIT,IAAKS,EACL5B,SAAU4B,WCrBtCC,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,U","file":"static/js/main.65e61dee.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nconst AddCategory = ({ setcategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n    const handleOnChange = (e) => {\r\n        setInputValue(e.target.value);\r\n\r\n        console.log('EVENT HANDLE');\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        console.log('Submitted');\r\n        if (inputValue.length > 2) {\r\n            setcategories(cats => [inputValue, ...cats]);\r\n\r\n            console.log('setcategories executed');\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Buscar\"\r\n                value={inputValue}\r\n                onChange={handleOnChange}\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const GifGridItem = ({ title, id, url }) => {\r\n\r\n    return (\r\n        <div className=\"card animate__fadeIn\" id=\"card\">\r\n            <div className=\"img-container\">\r\n                <img src={url} alt={title} />\r\n            </div>\r\n            <div className=\"footer-contet\">\r\n                <p>\r\n                    {title}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired\r\n}"," export const getGifs = async (category) => {\r\n\r\n    const key = '9jyHoCZbTjUX3XiZGx3P3eSM03cwOiBi';\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${key}`;\r\n\r\n    const result = await fetch(url);\r\n\r\n    const { data } = await result.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst  GifGrid = ({ category }) => {\r\n\r\n    const {loading, data: images} = useFetchGifs(category);\r\n\r\n    return (\r\n    \r\n        <div className=\"card-grid\">\r\n         \r\n         {loading ?\r\n         <h1>Cargando...</h1>:\r\n         <>\r\n             {images.map(img => <GifGridItem key={img.id} {...img} />)}\r\n         </>\r\n         }\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n    category: PropTypes.string.isRequired\r\n}\r\nexport default GifGrid;","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(result => setstate({\r\n            data: result,\r\n            loading: false\r\n        }));\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { useState } from \"react\";\r\nimport AddCategory from \"./Components/AddCategory\";\r\nimport GifGrid from \"./Components/GifGrid\";\r\n\r\n\r\nexport const GifExpertApp = ({ defaultCategories = [] }) => {\r\n\r\n\r\n    const [categories, setcategories] = useState(defaultCategories);\r\n\r\n    return (\r\n        <div className=\"principal-container\">\r\n            <div className=\"header\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\"><path fill=\"#0099ff\" fill-opacity=\"1\" d=\"M0,32L120,42.7C240,53,480,75,720,74.7C960,75,1200,53,1320,42.7L1440,32L1440,0L1320,0C1200,0,960,0,720,0C480,0,240,0,120,0L0,0Z\"></path></svg>\r\n                <h2>GIPHY FINDER</h2>\r\n                <AddCategory setcategories={setcategories} />\r\n            \r\n            </div>\r\n            <div className=\"space\"/>\r\n\r\n            <div className=\"body-card\">\r\n            <ol>\r\n                {categories && categories.map(item => {\r\n                    return (\r\n                        <GifGrid\r\n                            key={item}\r\n                            category={item}\r\n                        />\r\n                    )\r\n                })\r\n                }\r\n            </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from \"./App\";\n\nReactDOM.render(<GifExpertApp/>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}